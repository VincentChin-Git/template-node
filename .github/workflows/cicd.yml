name: Coin Backend Deploy

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - name: install, lint, tsc
        run: |
          npm install
          npm run lint
          npm run tsc
  # build:
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Create env file
  #       run: |
  #         echo "${{ secrets.ENV_FILE }}" > .env.coin
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         dockerfile: ./Dockerfile
  #         tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:coin-be
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Set permissions for private key
  #       run: |
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
  #         chmod 600 key.pem
  #     - name: Stop running container
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_URL }} 'sudo docker stop ${{ secrets.CONTAINER_NAME }} || true'
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_URL }} 'sudo docker rm ${{ secrets.CONTAINER_NAME }} || true'
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_URL }} 'sudo docker image prune --force'
  #     - name: Pull Docker image
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_URL }} 'sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:coin-be'
  #     - name: Run new container
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_URL }} 'sudo docker run -d --name ${{ secrets.CONTAINER_NAME }} -p ${{ secrets.EC2_PORT }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:coin-be'
